<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>REAL</title>
  
  <subtitle>Liam Xander</subtitle>
  <link href="http://liam-xander.github.io/atom.xml" rel="self"/>
  
  <link href="http://liam-xander.github.io/"/>
  <updated>2024-03-23T06:53:55.462Z</updated>
  <id>http://liam-xander.github.io/</id>
  
  <author>
    <name>Liam Xander</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对Astar算法及相关知识点的整理</title>
    <link href="http://liam-xander.github.io/2024/03/23/20240323/"/>
    <id>http://liam-xander.github.io/2024/03/23/20240323/</id>
    <published>2024-03-23T14:50:00.000Z</published>
    <updated>2024-03-23T06:53:55.462Z</updated>
    
    <content type="html"><![CDATA[<p>怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》</p><hr><h4 id="Astar-searcher-cpp"><a href="#Astar-searcher-cpp" class="headerlink" title="Astar_searcher.cpp"></a>Astar_searcher.cpp</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include "Astar_searcher.h"using namespace std;using namespace Eigen;bool tie_break = false;void AstarPathFinder::initGridMap(double _resolution, Vector3d global_xyz_l, Vector3d global_xyz_u, int max_x_id, int max_y_id, int max_z_id){       gl_xl = global_xyz_l(0);    gl_yl = global_xyz_l(1);    gl_zl = global_xyz_l(2);    gl_xu = global_xyz_u(0);    gl_yu = global_xyz_u(1);    gl_zu = global_xyz_u(2);        GLX_SIZE = max_x_id;    GLY_SIZE = max_y_id;    GLZ_SIZE = max_z_id;    GLYZ_SIZE  = GLY_SIZE * GLZ_SIZE;    GLXYZ_SIZE = GLX_SIZE * GLYZ_SIZE;    resolution = _resolution;    inv_resolution = 1.0 / _resolution;        data = new uint8_t[GLXYZ_SIZE];    memset(data, 0, GLXYZ_SIZE * sizeof(uint8_t));        GridNodeMap = new GridNodePtr ** [GLX_SIZE];    for(int i = 0; i &lt; GLX_SIZE; i++){        GridNodeMap[i] = new GridNodePtr * [GLY_SIZE];        for(int j = 0; j &lt; GLY_SIZE; j++){            GridNodeMap[i][j] = new GridNodePtr [GLZ_SIZE];            for( int k = 0; k &lt; GLZ_SIZE;k++){                Vector3i tmpIdx(i,j,k);                Vector3d pos = gridIndex2coord(tmpIdx);                GridNodeMap[i][j][k] = new GridNode(tmpIdx, pos);            }        }    }}void AstarPathFinder::resetGrid(GridNodePtr ptr){    ptr-&gt;id = 0;    ptr-&gt;cameFrom = NULL;    ptr-&gt;gScore = inf;    ptr-&gt;fScore = inf;}void AstarPathFinder::resetUsedGrids(){       for(int i=0; i &lt; GLX_SIZE ; i++)        for(int j=0; j &lt; GLY_SIZE ; j++)            for(int k=0; k &lt; GLZ_SIZE ; k++)                resetGrid(GridNodeMap[i][j][k]);}void AstarPathFinder::setObs(const double coord_x, const double coord_y, const double coord_z){       if( coord_x &lt; gl_xl  || coord_y &lt; gl_yl  || coord_z &lt;  gl_zl ||         coord_x &gt;= gl_xu || coord_y &gt;= gl_yu || coord_z &gt;= gl_zu )        return;    int idx_x = static_cast&lt;int&gt;( (coord_x - gl_xl) * inv_resolution);    int idx_y = static_cast&lt;int&gt;( (coord_y - gl_yl) * inv_resolution);    int idx_z = static_cast&lt;int&gt;( (coord_z - gl_zl) * inv_resolution);          data[idx_x * GLYZ_SIZE + idx_y * GLZ_SIZE + idx_z] = 1;}vector&lt;Vector3d&gt; AstarPathFinder::getVisitedNodes(){       vector&lt;Vector3d&gt; visited_nodes;    for(int i = 0; i &lt; GLX_SIZE; i++)        for(int j = 0; j &lt; GLY_SIZE; j++)            for(int k = 0; k &lt; GLZ_SIZE; k++){                   if(GridNodeMap[i][j][k]-&gt;id != 0) // visualize all nodes in open and close list//                if(GridNodeMap[i][j][k]-&gt;id == -1)  // visualize nodes in close list only TODO: careful                    visited_nodes.push_back(GridNodeMap[i][j][k]-&gt;coord);            }    std::cout &lt;&lt; "getVisitedNodes函数结束"  &lt;&lt; std::endl;    ROS_WARN("visited_nodes size : %d", visited_nodes.size());    return visited_nodes;}Vector3d AstarPathFinder::gridIndex2coord(const Vector3i &amp; index) {    Vector3d pt;    pt(0) = ((double)index(0) + 0.5) * resolution + gl_xl;    pt(1) = ((double)index(1) + 0.5) * resolution + gl_yl;    pt(2) = ((double)index(2) + 0.5) * resolution + gl_zl;    return pt;}Vector3i AstarPathFinder::coord2gridIndex(const Vector3d &amp; pt) {    Vector3i idx;    idx &lt;&lt;  min( max( int( (pt(0) - gl_xl) * inv_resolution), 0), GLX_SIZE - 1),            min( max( int( (pt(1) - gl_yl) * inv_resolution), 0), GLY_SIZE - 1),            min( max( int( (pt(2) - gl_zl) * inv_resolution), 0), GLZ_SIZE - 1);                        return idx;}Eigen::Vector3d AstarPathFinder::coordRounding(const Eigen::Vector3d &amp; coord){    return gridIndex2coord(coord2gridIndex(coord));}inline bool AstarPathFinder::isOccupied(const Eigen::Vector3i &amp; index) const{    return isOccupied(index(0), index(1), index(2));}inline bool AstarPathFinder::isFree(const Eigen::Vector3i &amp; index) const{    return isFree(index(0), index(1), index(2));}inline bool AstarPathFinder::isOccupied(const int &amp; idx_x, const int &amp; idx_y, const int &amp; idx_z) const {    return  (idx_x &gt;= 0 &amp;&amp; idx_x &lt; GLX_SIZE &amp;&amp; idx_y &gt;= 0 &amp;&amp; idx_y &lt; GLY_SIZE &amp;&amp; idx_z &gt;= 0 &amp;&amp; idx_z &lt; GLZ_SIZE &amp;&amp;             (data[idx_x * GLYZ_SIZE + idx_y * GLZ_SIZE + idx_z] == 1));}inline bool AstarPathFinder::isFree(const int &amp; idx_x, const int &amp; idx_y, const int &amp; idx_z) const {    return (idx_x &gt;= 0 &amp;&amp; idx_x &lt; GLX_SIZE &amp;&amp; idx_y &gt;= 0 &amp;&amp; idx_y &lt; GLY_SIZE &amp;&amp; idx_z &gt;= 0 &amp;&amp; idx_z &lt; GLZ_SIZE &amp;&amp;            (data[idx_x * GLYZ_SIZE + idx_y * GLZ_SIZE + idx_z] &lt; 1));}inline void AstarPathFinder::AstarGetSucc(GridNodePtr currentPtr, vector&lt;GridNodePtr&gt; &amp; neighborPtrSets, vector&lt;double&gt; &amp; edgeCostSets)//获取当前节点的相邻节点{       std::cout &lt;&lt; "进入AstarGetSucc函数，开始获取当前节点的相邻节点" &lt;&lt; std::endl;    neighborPtrSets.clear(); //清空neighborPtrSets    // Note: the pointers in this set copy pointers to GridNodeMap    edgeCostSets.clear();//清空edgeCostSets    /*    *    STEP 4: finish AstarPathFinder::AstarGetSucc yourself     please write your code below    *    *    */    // idea index -&gt; coordinate -&gt; edgecost    if(currentPtr == nullptr)//如果当前节点为空，输出错误信息        std::cout &lt;&lt; "Error: Current pointer is null!" &lt;&lt; endl;    Eigen::Vector3i thisNode = currentPtr -&gt; index;//获取当前节点的索引    int this_x = thisNode[0];//获取当前节点的x坐标    int this_y = thisNode[1];    int this_z = thisNode[2];    auto this_coord = currentPtr -&gt; coord;//获取当前节点的坐标    int  n_x, n_y, n_z;//相邻节点的x,y,z坐标    double dist;//当前节点到相邻节点的距离    GridNodePtr temp_ptr = nullptr;//临时指针    Eigen::Vector3d n_coord;//相邻节点的坐标    for(int i = -1;i &lt;= 1;++i ){    // search in 3D space        for(int j = -1;j &lt;= 1;++j ){//遍历相邻节点            for(int k = -1;k &lt;= 1;++k){//遍历相邻节点,i,j,k分别表示相邻节点在x,y,z方向上的偏移                if( i == 0 &amp;&amp; j == 0 &amp;&amp; k == 0)//如果i,j,k都为0，跳过当前节点                    continue; // to avoid this node,中文：跳过当前节点                n_x = this_x + i;//计算相邻节点的x坐标                n_y = this_y + j;                n_z = this_z + k;                if( (n_x &lt; 0) || (n_x &gt; (GLX_SIZE - 1)) || (n_y &lt; 0) || (n_y &gt; (GLY_SIZE - 1) ) || (n_z &lt; 0) || (n_z &gt; (GLZ_SIZE - 1)))//如果相邻节点的坐标超出地图范围，跳过                //GLX_SIZE - 1为什么要减1？因为数组的下标是从0开始的，所以地图的范围是0到GLX_SIZE - 1                    continue; // to avoid index problem                if(isOccupied(n_x, n_y, n_z))//如果相邻节点是障碍物，跳过                    continue; // to avoid obstacles                // put the pointer into neighborPtrSets                temp_ptr = GridNodeMap[n_x][n_y][n_z];//获取相邻节点的指针                if(temp_ptr-&gt;id == -1) continue; //如果相邻节点已经被扩展过了，跳过                // todo to check this; why the node can transversing the obstacles                n_coord = temp_ptr-&gt;coord;//获取相邻节点的坐标                if(temp_ptr == currentPtr){//如果相邻节点等于当前节点，输出错误信息                    std::cout &lt;&lt; "Error: temp_ptr == currentPtr)" &lt;&lt; std::endl;                }                if( (std::abs(n_coord[0] - this_coord[0]) &lt; 1e-6) and (std::abs(n_coord[1] - this_coord[1]) &lt; 1e-6) and (std::abs(n_coord[2] - this_coord[2]) &lt; 1e-6 )){                    //如果相邻节点的坐标和当前节点的坐标相同，输出错误信息                    std::cout &lt;&lt; "Error: Not expanding correctly!" &lt;&lt; std::endl;//中文：没有正确扩展                    std::cout &lt;&lt; "n_coord:" &lt;&lt; n_coord[0] &lt;&lt; " "&lt;&lt;n_coord[1]&lt;&lt;" "&lt;&lt;n_coord[2] &lt;&lt; std::endl;//输出相邻节点的坐标                    std::cout &lt;&lt; "this_coord:" &lt;&lt; this_coord[0] &lt;&lt; " "&lt;&lt;this_coord[1]&lt;&lt;" "&lt;&lt;this_coord[2] &lt;&lt; std::endl;//输出当前节点的坐标                    std::cout &lt;&lt; "current node index:" &lt;&lt; this_x &lt;&lt; " "&lt;&lt; this_y&lt;&lt;" "&lt;&lt; this_z &lt;&lt; std::endl;//输出当前节点的索引                    std::cout &lt;&lt; "neighbor node index:" &lt;&lt; n_x &lt;&lt; " "&lt;&lt; n_y&lt;&lt;" "&lt;&lt; n_z &lt;&lt; std::endl;//输出相邻节点的索引                }                dist = std::sqrt( (n_coord[0] - this_coord[0]) * (n_coord[0] - this_coord[0])+                        (n_coord[1] - this_coord[1]) * (n_coord[1] - this_coord[1])+                        (n_coord[2] - this_coord[2]) * (n_coord[2] - this_coord[2]));//计算当前节点到相邻节点的距离                neighborPtrSets.push_back(temp_ptr);//将相邻节点的指针放入neighborPtrSets                 // calculate the cost in edgeCostSets: inf means that is not unexpanded                edgeCostSets.push_back(dist); //将当前节点到相邻节点的距离放入edgeCostSets，  vector&lt;double&gt; edgeCostSets;//存储当前节点到相邻节点的代价                // put the cost inot edgeCostSets            }        }    }std::cout &lt;&lt; "AstarGetSucc函数结束，结束获取相邻节点" &lt;&lt; std::endl;}double AstarPathFinder::getHeu(GridNodePtr node1, GridNodePtr node2)//获取启发函数,这里使用的是对角距离,也就是三维空间中两点之间的最短距离{   //是不是进入这个函数，就生成了结构体变量node1和node2？是的，进入这个函数，就生成了结构体变量node1和node2        std::cout &lt;&lt; "进入getHeu函数,获取启发函数" &lt;&lt; std::endl;    /*     choose possible heuristic function you want    Manhattan, Euclidean, Diagonal, or 0 (Dijkstra)    Remember tie_breaker learned in lecture, add it here ?    *    *    *    STEP 1: finish the AstarPathFinder::getHeu , which is the heuristic function    please write your code below    *    *    */    double h;//启发函数的值    auto node1_coord = node1-&gt;coord;//获取节点1的坐标    auto node2_coord = node2-&gt;coord;//获取节点2的坐标    // Heuristics 1: Manhattan//    h = std::abs(node1_coord(0) - node2_coord(0) ) +//            std::abs(node1_coord(1) - node2_coord(1) ) +//            std::abs(node1_coord(2) - node2_coord(2) );    // Heuristics 2: Euclidean//    h = std::sqrt(std::pow((node1_coord(0) - node2_coord(0)), 2 ) +//            std::pow((node1_coord(1) - node2_coord(1)), 2 ) +//            std::pow((node1_coord(2) - node2_coord(2)), 2 ));    // Heuristics 3: Diagnol distance        double dx = std::abs(node1_coord(0) - node2_coord(0) );//计算两点在x轴上的距离        double dy = std::abs(node1_coord(1) - node2_coord(1) );        double dz = std::abs(node1_coord(2) - node2_coord(2) );        double min_xyz = std::min({dx, dy, dz});        h = dx + dy + dz + (std::sqrt(3.0) -3) * min_xyz;//对角距离         // idea: diagnol is a short-cut, find out how many short-cuts can be realized        if(tie_break){            double p = 1.0 / 25.0;            h *= (1.0 + p);            //std::cout &lt;&lt; "Tie Break!" &lt;&lt; std::endl;        }    std::cout &lt;&lt;"getHeu函数结束,获取启发函数中的h is: "&lt;&lt; h &lt;&lt; std::endl;    return h;}void AstarPathFinder::AstarGraphSearch(Vector3d start_pt, Vector3d end_pt)//A*搜索算法,输入起点和终点{       std::cout &lt;&lt;"开始AstarGraphSearch：A*搜索算法"&lt;&lt;std::endl;    ros::Time time_1 = ros::Time::now();   //记录开始时间，用于计算程序运行时间    //这里的time_1是一个ros::Time类型的变量，用于记录程序开始运行的时间    //index of start_point and end_point    Vector3i start_idx = coord2gridIndex(start_pt);//将起点坐标转换为栅格地图中的索引    Vector3i end_idx   = coord2gridIndex(end_pt);    goalIdx = end_idx;//记录终点的索引    //Vector3i是一个类吗？是的，Vector3i是Eigen库中的一个类，用于表示三维向量，这里用于表示三维索引    //position of start_point and end_point    start_pt = gridIndex2coord(start_idx);//将起点的索引转换为坐标    end_pt   = gridIndex2coord(end_idx);    //Initialize the pointers of struct GridNode which represent start node and goal node    GridNodePtr startPtr = new GridNode(start_idx, start_pt);//创建一个GridNode结构体指针，表示起点    GridNodePtr endPtr   = new GridNode(end_idx,   end_pt);    //openSet is the open_list implemented through multimap in STL library    openSet.clear();//清空openSet    // currentPtr represents the node with lowest f(n) in the open_list    GridNodePtr currentPtr  = NULL;//当前节点    GridNodePtr neighborPtr = NULL;//相邻节点    //put start node in open set    startPtr -&gt; gScore = 0;//将起点的g值设置为0    startPtr -&gt; fScore = getHeu(startPtr,endPtr);   //获取启发函数，这里使用的是对角距离,也就是三维空间中两点之间的最短距离    //STEP 1: finish the AstarPathFinder::getHeu , which is the heuristic function    startPtr -&gt; id = 1; //把起点放入openSet中    startPtr -&gt; coord = start_pt;//startPtr是一个GridNode结构体指针，表示起点，start_pt是起点的坐标，将起点的坐标赋值给startPtr的coord    openSet.insert( make_pair(startPtr -&gt; fScore, startPtr) );//将起点放入openSet中    //这里的startPtr -&gt; fScore是起点的f值，startPtr是一个GridNode结构体指针，表示起点，make_pair(startPtr -&gt; fScore, startPtr)是一个pair对象，表示起点的f值和起点    //openSet是一个multimap对象，它的键是double类型，值是GridNodePtr类型，insert是multimap的一个函数，用于将pair对象插入到multimap中    //按照键的大小自动排序，所以openSet中的节点是按照f值从小到大排序的     // todo Note: modified, insert the pointer GridNodeMap[i][j][k] to the start node in grid map    /*    *    STEP 2 :  some else preparatory works which should be done before while loop    please write your code below    *    *    */    // three dimension pointer GridNodeMap[i][j][k] is pointed to a struct GridNode(Eigen::Vector3i _index, Eigen::Vector3d _coord);    // assign g(xs) = 0, g(n) = inf (already done in initialzation of struct)    // mark start point as visited(expanded) (id 0: no operation, id: 1 in OPEN, id -1: in CLOSE )    GridNodeMap[start_idx[0]][start_idx[1]][start_idx[2]] -&gt; id = 1;//将起点的id设置为1，表示起点在openSet中    vector&lt;GridNodePtr&gt; neighborPtrSets;//存储当前节点的相邻节点,这里的vector是容器，存储GridNodePtr类型的数据，gridNodePtr包含了节点的坐标，方向，索引，g值，f值，父节点，节点的迭代器    //所以这个vector的维数不止三维，而是六维，存储了相邻节点的坐标，方向，索引，g值，f值，父节点    vector&lt;double&gt; edgeCostSets;//存储当前节点到相邻节点的代价，这是一维吗？是的，这是一个一维的vector，存储了当前节点到相邻节点的代价    Eigen::Vector3i current_idx; // record the current index//记录当前节点的索引    // this is the main loop    while ( !openSet.empty() ){//当openSet不为空时，循环执行以下操作        /*        *        *        step 3: Remove the node with lowest cost function from open set to closed set        please write your code below                IMPORTANT NOTE!!!        This part you should use the C++ STL: multimap, more details can be find in Homework description        *        *        */        currentPtr = openSet.begin() -&gt; second;//这里的当前节点是openSet中f值最小的节点，second是multimap的一个函数，用于返回第二个元素的迭代器        //这里的当前节点虽然是指针，是不是对应一个新的结构体变量        //openSet是一个multimap对象，begin()是multimap的一个函数，用于返回指向第一个元素（这里的第一个元素是包含键值的迭代器）的迭代器,second是multimap的一个函数，用于返回第二个元素的迭代器         // first T1 键, second T2 值 ,pair&lt;type 1,type 2&gt;        openSet.erase(openSet.begin());//erase()是multimap的一个函数，用于删除指定位置的元素         // remove the node wistd::cout &lt;&lt;"h is: "&lt;&lt; h &lt;&lt; std::endl;th minimal f value        current_idx = currentPtr-&gt;index;//获取当前节点的索引，一个新的变量current_idx是不是意味着一个新的GridNodePtr变量currentPtr被创建了？是的，currentPtr是一个GridNode结构体指针，表示当前节点        //是不是也新建了一个新的结构体变量（不是指针）：是的，currentPtr是一个GridNode结构体指针，表示当前节点，currentPtr-&gt;index是一个Vector3i类型的变量，表示当前节点的索引        GridNodeMap[current_idx[0]][current_idx[1]][current_idx[2]] -&gt; id = -1;// update the id in grid node map,中文是更新栅格地图中的节点id，将当前节点的id设置为-1，表示当前节点在closeSet中        // if the current node is the goal         if( currentPtr-&gt;index == goalIdx ){            ros::Time time_2 = ros::Time::now();//记录结束时间，用于计算程序运行时间            terminatePtr = currentPtr;//将当前节点设置为终点            ROS_WARN("[A*]{sucess}  Time in A*  is %f ms, path cost if %f m", (time_2 - time_1).toSec() * 1000.0, currentPtr-&gt;gScore * resolution );                        //(time_2 - time_1).toSec() * 1000.0具体解释：(time_2 - time_1).toSec()是程序运行的时间，toSec()是一个函数，用于返回时间的秒数，*1000.0是将秒转换为毫秒            //currentPtr-&gt;gScore * resolution是路径的代价，currentPtr是一个GridNode结构体指针，表示当前节点，gScore是当前节点的g值，resolution是地图的分辨率             std::cout &lt;&lt;"AstarGraphSearch：A*搜索算法结束"&lt;&lt;std::endl;            return;//返回,结束程序        }        //获取邻居节点        //get the succetion        AstarGetSucc(currentPtr, neighborPtrSets, edgeCostSets);  //STEP 4: finish AstarPathFinder::AstarGetSucc yourself             /*        *        *        STEP 5:  For all unexpanded neigbors "m" of node "n", please finish this for loop        please write your code below        对于节点“n”的所有未扩展的邻居“m”，请完成这个for循环        *                */                 for(int i = 0; i &lt; (int)neighborPtrSets.size(); i++){//遍历当前节点的相邻节点            /*            *            *            Judge if the neigbors have been expanded            please write your code below                        IMPORTANT NOTE!!!            neighborPtrSets[i]-&gt;id = -1 : expanded, equal to this node is in close set            neighborPtrSets[i]-&gt;id = 1 : unexpanded, equal to this node is in open set            *                    */            neighborPtr = neighborPtrSets[i];//获取相邻节点的指针            if(neighborPtr -&gt; id == 0){//这个节点没有被扩展过                 //discover a new node, which is not in the closed set and open set                /*                *                *                STEP 6:  As for a new node, do what you need do ,and then put neighbor in open set and record it                please write your code below                *                        */                // shall update: gScore = inf; fScore = inf; cameFrom = NULL, id, mayby direction                neighborPtr-&gt;gScore = currentPtr-&gt;gScore + edgeCostSets[i];//更新相邻节点的g值                neighborPtr-&gt;fScore = neighborPtr-&gt;gScore + getHeu(neighborPtr,endPtr);//更新相邻节点的f值                std::cout&lt;&lt;"第"&lt;&lt;i&lt;&lt;"次进入getHeu函数，获取启发函数"&lt;&lt;std::endl;                neighborPtr-&gt;cameFrom = currentPtr;//更新相邻节点的父节点                 // todo shallow copy or deep copy,翻译：浅拷贝还是深拷贝                // push node "m" into OPEN                openSet.insert(make_pair(neighborPtr -&gt; fScore, neighborPtr));//将相邻节点放入openSet中                neighborPtr -&gt; id = 1;//将相邻节点的id设置为1，表示相邻节点在openSet中                continue;            }            else if(neighborPtr -&gt; id == 1){ //这个节点在openSet中，需要判断是否需要更新，当你编写代码时，应该删除“0”                //this node is in open set and need to judge if it needs to update, the "0" should be deleted when you are coding                /*                *                *                STEP 7:  As for a node in open set, update it , maintain the openset ,and then put neighbor in open set and record it                please write your code below                *                        */                // shall update: gScore; fScore; cameFrom, mayby direction                if(neighborPtr -&gt; gScore &gt; (currentPtr -&gt; gScore + edgeCostSets[i])){//如果当前节点的g值加上当前节点到相邻节点的代价小于相邻节点的g值                    neighborPtr -&gt; gScore = currentPtr -&gt; gScore + edgeCostSets[i];//更新相邻节点的g值                    neighborPtr -&gt; fScore = neighborPtr -&gt; gScore + getHeu(neighborPtr,endPtr);//更新相邻节点的f值                    neighborPtr -&gt; cameFrom = currentPtr;//更新相邻节点的父节点                }                continue;//继续下一次循环            }            else{//this node is in closed set                /*                *                please write your code below                *                        */                // todo nothing to do here?                continue;//情况：这个节点在closeSet中，不需要做任何操作，继续下一次循环，在closeSet意味着这个节点已经被扩展过了            }        }          }    //if search fails    ros::Time time_2 = ros::Time::now();//记录结束时间，用于计算程序运行时间    if((time_2 - time_1).toSec() &gt; 0.1)//如果程序运行时间大于0.1s        ROS_WARN("Time consume in Astar path finding is %f", (time_2 - time_1).toSec() );//输出程序运行时间}//获得路径，返回一个vector，存储了路径上的点，按照顺序存储，第一个点是起点，最后一个点是终点vector&lt;Vector3d&gt; AstarPathFinder::getPath() {        std::cout &lt;&lt;"开始getPath函数"&lt;&lt;std::endl;    vector&lt;Vector3d&gt; path;//存储路径上的点,按照顺序存储，第一个点是起点，最后一个点是终点，    vector&lt;GridNodePtr&gt; gridPath;//存储路径上的节点,区别：path存储的是路径上的点，gridPath存储的是路径上的节点    /*    *    *    STEP 8:  trace back from the curretnt nodePtr to get all nodes along the path    please write your code below    *          */    auto ptr = terminatePtr;//ptr是一个GridNode结构体指针，表示终点    while(ptr -&gt; cameFrom != NULL){//当ptr的父节点不为空时，循环执行以下操作        gridPath.push_back(ptr);//将ptr放入gridPath中        ptr = ptr-&gt;cameFrom;//将ptr的父节点赋值给ptr    }    for (auto ptr: gridPath)//遍历gridPath,    //具体解释一下auto ptr: gridPath，ptr 是一个局部变量，其类型由 auto 自动推导得出，和 gridPath 中的数据类型相同。在每次循环中，ptr 都会被设置为 gridPath 中的当前元素。        path.push_back(ptr-&gt;coord);//将ptr的坐标放入path中            reverse(path.begin(),path.end());//将path中的元素逆序    std:: cout &lt;&lt; "getPath函数结束,path size（节点数） is: " &lt;&lt; path.size() &lt;&lt; std::endl;//输出路径的长度    return path;//返回路径    }// if the difference of f is trivial, then choose then prefer the path along the straight line from start to goal// discared!!!GridNodePtr &amp; TieBreaker(const std::multimap&lt;double, GridNodePtr&gt; &amp;  openSet, const GridNodePtr &amp; endPtr) {//作用：如果f值的差异微不足道，则选择沿着从起点到终点的直线的路径    // todo do I have to update the f in openSet??    std::multimap&lt;double, GridNodePtr&gt; local_set;//存储当前节点的相邻节点    auto f_min = openSet.begin()-&gt;first;//获取openSet中f值最小的节点的f值    auto f_max = f_min + 1e-2;//f_max是f_min加上一个微不足道的差值    auto itlow = openSet.lower_bound (f_min);//获取openSet中f值最小的节点的迭代器    auto itup = openSet.upper_bound(f_max);//获取openSet中f值最大的节点的迭代器    double cross, f_new;//cross是当前节点到相邻节点的距离，f_new是相邻节点的f值    for (auto it=itlow; it!=itup; ++it){//遍历itlow到itup之间的节点        std::cout &lt;&lt; "f value is:" &lt;&lt; (*it).first &lt;&lt; " pointer is: " &lt;&lt; (*it).second &lt;&lt; '\n';//输出f值和指针        cross = std::abs(endPtr-&gt;coord(0) - (*it).second-&gt;coord(0)) +                std::abs(endPtr-&gt;coord(1) - (*it).second-&gt;coord(1)) +                std::abs(endPtr-&gt;coord(2) - (*it).second-&gt;coord(2));//计算当前节点到相邻节点的距离        f_new = (*it).second-&gt;fScore + 0.001 * cross;//计算相邻节点的f值        local_set.insert( make_pair(f_new, (*it).second) );//将相邻节点的f值和指针放入local_set中 ，在 local_set 中插入 pair（f_new, (*it).second），这样一个 std::pair 对象，其中第一个元素是 f_new，第二个元素是 (*it).second。        // todo what is iterator, is this way correct?    }    return local_set.begin()-&gt;second;//返回local_set中f值最小的节点的指针，second是返回的是指针，表示local_set中f值最小的节点}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Astar-searcher-h"><a href="#Astar-searcher-h" class="headerlink" title="Astar_searcher.h"></a>Astar_searcher.h</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef _ASTART_SEARCHER_H#define _ASTART_SEARCHER_H#include &lt;iostream&gt;#include &lt;ros/ros.h&gt;#include &lt;ros/console.h&gt;#include &lt;Eigen/Eigen&gt;#include "backward.hpp"#include "node.h"class AstarPathFinder{private:protected:uint8_t * data;//地图数据GridNodePtr *** GridNodeMap;//节点地图Eigen::Vector3i goalIdx;//目标点的索引int GLX_SIZE, GLY_SIZE, GLZ_SIZE;//地图的大小,地图的大小是三维的，所以有三个维度int GLXYZ_SIZE, GLYZ_SIZE;//地图的大小，区别于上面的地图大小，这个地图大小是一个数值，是三维地图大小的乘积//有什么区别：GLX_SIZE, GLY_SIZE, GLZ_SIZE是地图的大小，GLXYZ_SIZE是地图大小的乘积double resolution, inv_resolution;//分辨率和分辨率的倒数double gl_xl, gl_yl, gl_zl;//地图的边界double gl_xu, gl_yu, gl_zu;//地图的边界//有什么区别：gl_xl, gl_yl, gl_zl是地图的下界，gl_xu, gl_yu, gl_zu是地图的上界GridNodePtr terminatePtr;//终止节点,terminatePtr是一个GridNodePtr类型的指针std::multimap&lt;double, GridNodePtr&gt; openSet;//multimap是一个关联容器，它的元素是一对键值对，键和值可以是任意类型，键值对是按照键的大小自动排序的//std::multimap&lt;double, GridNodePtr&gt; openSet;具体解释每一部分：std是C++标准库的命名空间，multimap是一个关联容器，它的元素是一对键值对//double是键的类型，GridNodePtr是值的类型，openSet是一个multimap对象，它的键是double类型，值是GridNodePtr类型double getHeu(GridNodePtr node1, GridNodePtr node2);void AstarGetSucc(GridNodePtr currentPtr, std::vector&lt;GridNodePtr&gt; &amp; neighborPtrSets, std::vector&lt;double&gt; &amp; edgeCostSets);    bool isOccupied(const int &amp; idx_x, const int &amp; idx_y, const int &amp; idx_z) const;bool isOccupied(const Eigen::Vector3i &amp; index) const;bool isFree(const int &amp; idx_x, const int &amp; idx_y, const int &amp; idx_z) const;bool isFree(const Eigen::Vector3i &amp; index) const;Eigen::Vector3d gridIndex2coord(const Eigen::Vector3i &amp; index);Eigen::Vector3i coord2gridIndex(const Eigen::Vector3d &amp; pt);public:AstarPathFinder(){};//构造函数，初始化~AstarPathFinder(){};//析构函数，释放内存void AstarGraphSearch(Eigen::Vector3d start_pt, Eigen::Vector3d end_pt);//A*算法void resetGrid(GridNodePtr ptr);//重置地图void resetUsedGrids();//重置已使用的地图void initGridMap(double _resolution, Eigen::Vector3d global_xyz_l, Eigen::Vector3d global_xyz_u, int max_x_id, int max_y_id, int max_z_id);//初始化地图,设置地图的参数,包括分辨率，地图的大小，地图的边界void setObs(const double coord_x, const double coord_y, const double coord_z);//设置障碍物/Eigen::Vector3d coordRounding(const Eigen::Vector3d &amp; coord);//坐标取整,将坐标取整std::vector&lt;Eigen::Vector3d&gt; getPath();std::vector&lt;Eigen::Vector3d&gt; getVisitedNodes();};#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="demo-node-cpp"><a href="#demo-node-cpp" class="headerlink" title="demo_node.cpp"></a>demo_node.cpp</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;math.h&gt;#include &lt;pcl_conversions/pcl_conversions.h&gt;#include &lt;pcl/point_cloud.h&gt;#include &lt;pcl/point_types.h&gt;#include &lt;ros/ros.h&gt;#include &lt;ros/console.h&gt;#include &lt;sensor_msgs/PointCloud2.h&gt;#include &lt;nav_msgs/Odometry.h&gt;#include &lt;nav_msgs/Path.h&gt;#include &lt;geometry_msgs/PoseStamped.h&gt;#include &lt;visualization_msgs/MarkerArray.h&gt;#include &lt;visualization_msgs/Marker.h&gt;#include "Astar_searcher.h"#include "JPS_searcher.h"#include "backward.hpp"using namespace std;using namespace Eigen;namespace backward {backward::SignalHandling sh;}// simulation param from launch filedouble _resolution, _inv_resolution, _cloud_margin;double _x_size, _y_size, _z_size;    // useful global variablesbool _has_map   = false;Vector3d _start_pt;Vector3d _map_lower, _map_upper;int _max_x_id, _max_y_id, _max_z_id;// ros relatedros::Subscriber _map_sub, _pts_sub;ros::Publisher  _grid_path_vis_pub, _visited_nodes_vis_pub, _grid_map_vis_pub;AstarPathFinder * _astar_path_finder     = new AstarPathFinder();//创建A*路径规划对象,AsatrPathFinder是一个类JPSPathFinder   * _jps_path_finder       = new JPSPathFinder();//创建JPS路径规划对象void rcvWaypointsCallback(const nav_msgs::Path &amp; wp);void rcvPointCloudCallBack(const sensor_msgs::PointCloud2 &amp; pointcloud_map);void visGridPath( vector&lt;Vector3d&gt; nodes, bool is_use_jps );void visVisitedNode( vector&lt;Vector3d&gt; nodes );void pathFinding(const Vector3d start_pt, const Vector3d target_pt);void rcvWaypointsCallback(const nav_msgs::Path &amp; wp)//接收路径规划的目标点,并调用路径规划函数,进行路径规划{         if( wp.poses[0].pose.position.z &lt; 0.0 || _has_map == false )        return;    Vector3d target_pt;    target_pt &lt;&lt; wp.poses[0].pose.position.x,                 wp.poses[0].pose.position.y,                 wp.poses[0].pose.position.z;    ROS_INFO("[node] receive the planning target");    pathFinding(_start_pt, target_pt); //路径规划,调用路径规划函数,进行路径规划,并进行可视化,显示路径规划结果}void rcvPointCloudCallBack(const sensor_msgs::PointCloud2 &amp; pointcloud_map){       if(_has_map ) return;    pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud;    pcl::PointCloud&lt;pcl::PointXYZ&gt; cloud_vis;    sensor_msgs::PointCloud2 map_vis;    pcl::fromROSMsg(pointcloud_map, cloud);        if( (int)cloud.points.size() == 0 ) return;    pcl::PointXYZ pt;    for (int idx = 0; idx &lt; (int)cloud.points.size(); idx++)    {            pt = cloud.points[idx];                // set obstalces into grid map for path planning        _astar_path_finder-&gt;setObs(pt.x, pt.y, pt.z);        _jps_path_finder-&gt;setObs(pt.x, pt.y, pt.z);        // for visualize only        Vector3d cor_round = _astar_path_finder-&gt;coordRounding(Vector3d(pt.x, pt.y, pt.z));        pt.x = cor_round(0);        pt.y = cor_round(1);        pt.z = cor_round(2);        cloud_vis.points.push_back(pt);    }    cloud_vis.width    = cloud_vis.points.size();    cloud_vis.height   = 1;    cloud_vis.is_dense = true;    pcl::toROSMsg(cloud_vis, map_vis);    map_vis.header.frame_id = "/world";    _grid_map_vis_pub.publish(map_vis);//发布地图,用于rviz显示,发布的是经过处理的地图    _has_map = true;}void pathFinding(const Vector3d start_pt, const Vector3d target_pt){    //Call A* to search for a path    _astar_path_finder-&gt;AstarGraphSearch(start_pt, target_pt);//调用A*算法,进行路径规划    //Retrieve the path    auto grid_path     = _astar_path_finder-&gt;getPath();//获取路径,获取A*算法的路径,并获取已经访问的节点    auto visited_nodes = _astar_path_finder-&gt;getVisitedNodes();//获取已经访问的节点,获取A*算法的已经访问的节点,用于可视化    //Visualize the result    visGridPath (grid_path, false);//可视化路径,可视化A*算法的路径    visVisitedNode(visited_nodes);//可视化已访问的节点,可视化A*算法的已经访问的节点    //Reset map for next call    _astar_path_finder-&gt;resetUsedGrids();//重置地图,重置A*算法的地图,用于下一次路径规划    //_use_jps = 0 -&gt; Do not use JPS    //_use_jps = 1 -&gt; Use JPS    //you just need to change the #define value of _use_jps#define _use_jps 0#if _use_jps    {        //Call JPS to search for a path        _jps_path_finder -&gt; JPSGraphSearch(start_pt, target_pt);        //Retrieve the path        auto grid_path     = _jps_path_finder-&gt;getPath();        auto visited_nodes = _jps_path_finder-&gt;getVisitedNodes();        //Visualize the result        visGridPath   (grid_path, _use_jps);        visVisitedNode(visited_nodes);        //Reset map for next call        _jps_path_finder-&gt;resetUsedGrids();    }#endif}int main(int argc, char** argv){    ros::init(argc, argv, "demo_node");        // 输出节点启动提示    ROS_INFO("Demo node has started.");    ros::NodeHandle nh("~");//创建节点句柄,用于与ROS系统通信,创建一个私有节点句柄,用于与ROS系统通信        std::cout &lt;&lt; "Hold on, we'll win!" &lt;&lt; std::endl;    _map_sub  = nh.subscribe( "map",       1, rcvPointCloudCallBack );//订阅地图,接收地图,用于路径规划    _pts_sub  = nh.subscribe( "waypoints", 1, rcvWaypointsCallback );//订阅路径规划的目标点,接收路径规划的目标点,用于路径规划    _grid_map_vis_pub             = nh.advertise&lt;sensor_msgs::PointCloud2&gt;("grid_map_vis", 1);//发布地图,用于rviz显示,发布的是经过处理的地图    _grid_path_vis_pub            = nh.advertise&lt;visualization_msgs::Marker&gt;("grid_path_vis", 1);//发布路径,用于rviz显示,发布的是路径    _visited_nodes_vis_pub        = nh.advertise&lt;visualization_msgs::Marker&gt;("visited_nodes_vis",1);//发布已访问的节点,用于rviz显示,发布的是已经访问的节点    nh.param("map/cloud_margin",  _cloud_margin, 0.0); //地图的边缘    nh.param("map/resolution",    _resolution,   0.2);  //地图的分辨率        nh.param("map/x_size",        _x_size, 50.0);   //地图的大小    nh.param("map/y_size",        _y_size, 50.0);//地图的大小    nh.param("map/z_size",        _z_size, 5.0 );//地图的大小        nh.param("planning/start_x",  _start_pt(0),  0.0);//路径规划的起点    nh.param("planning/start_y",  _start_pt(1),  0.0);//路径规划的起点    nh.param("planning/start_z",  _start_pt(2),  0.0);//路径规划的起点    _map_lower &lt;&lt; - _x_size/2.0, - _y_size/2.0,     0.0;//地图的下边界    _map_upper &lt;&lt; + _x_size/2.0, + _y_size/2.0, _z_size;//地图的上边界        _inv_resolution = 1.0 / _resolution;//分辨率的倒数        _max_x_id = (int)(_x_size * _inv_resolution);//地图的最大索引    _max_y_id = (int)(_y_size * _inv_resolution);//地图的最大索引    _max_z_id = (int)(_z_size * _inv_resolution);//地图的最大索引    _astar_path_finder  = new AstarPathFinder();//创建A*路径规划对象    _astar_path_finder  -&gt; initGridMap(_resolution, _map_lower, _map_upper, _max_x_id, _max_y_id, _max_z_id);//初始化地图,设置地图的参数,包括分辨率，地图的大小，地图的边界//    _jps_path_finder    = new JPSPathFinder();//    _jps_path_finder    -&gt; initGridMap(_resolution, _map_lower, _map_upper, _max_x_id, _max_y_id, _max_z_id);        ros::Rate rate(100);//设置循环的频率,100Hz,具体解释一下：ros::Rate是一个类，用于控制循环的频率，这里的rate是对象还是构造函数？是对象    bool status = ros::ok();//节点是否正常运行    while(status) //节点是否正常运行    {        ros::spinOnce();      //检查是否有消息传入,处理回调函数        status = ros::ok();//节点是否正常运行        rate.sleep();//根据前面的设置,设置的频率是100Hz，rate是一个对象，对象可以调用成员函数，这里调用的是sleep()函数，用于控制循环的频率    }    delete _astar_path_finder;//释放内存    delete _jps_path_finder;//释放内存    return 0;}void visGridPath( vector&lt;Vector3d&gt; nodes, bool is_use_jps ){       visualization_msgs::Marker node_vis;     node_vis.header.frame_id = "world";    node_vis.header.stamp = ros::Time::now();        if(is_use_jps)        node_vis.ns = "demo_node/jps_path";    else        node_vis.ns = "demo_node/astar_path";    node_vis.type = visualization_msgs::Marker::CUBE_LIST;    node_vis.action = visualization_msgs::Marker::ADD;    node_vis.id = 0;    node_vis.pose.orientation.x = 0.0;    node_vis.pose.orientation.y = 0.0;    node_vis.pose.orientation.z = 0.0;    node_vis.pose.orientation.w = 1.0;    if(is_use_jps){        node_vis.color.a = 1.0;        node_vis.color.r = 1.0;        node_vis.color.g = 0.0;        node_vis.color.b = 0.0;    }    else{        node_vis.color.a = 1.0;        node_vis.color.r = 0.0;        node_vis.color.g = 1.0;        node_vis.color.b = 0.0;    }    node_vis.scale.x = _resolution;    node_vis.scale.y = _resolution;    node_vis.scale.z = _resolution;    geometry_msgs::Point pt;    for(int i = 0; i &lt; int(nodes.size()); i++)    {        Vector3d coord = nodes[i];        pt.x = coord(0);        pt.y = coord(1);        pt.z = coord(2);        node_vis.points.push_back(pt);    }    _grid_path_vis_pub.publish(node_vis);}void visVisitedNode( vector&lt;Vector3d&gt; nodes ){       visualization_msgs::Marker node_vis;     node_vis.header.frame_id = "world";    node_vis.header.stamp = ros::Time::now();    node_vis.ns = "demo_node/expanded_nodes";    node_vis.type = visualization_msgs::Marker::CUBE_LIST;    node_vis.action = visualization_msgs::Marker::ADD;    node_vis.id = 0;    node_vis.pose.orientation.x = 0.0;    node_vis.pose.orientation.y = 0.0;    node_vis.pose.orientation.z = 0.0;    node_vis.pose.orientation.w = 1.0;    node_vis.color.a = 0.5;    node_vis.color.r = 0.0;    node_vis.color.g = 0.0;    node_vis.color.b = 1.0;    node_vis.scale.x = _resolution;    node_vis.scale.y = _resolution;    node_vis.scale.z = _resolution;    geometry_msgs::Point pt;    for(int i = 0; i &lt; int(nodes.size()); i++)    {        Vector3d coord = nodes[i];        pt.x = coord(0);        pt.y = coord(1);        pt.z = coord(2);        node_vis.points.push_back(pt);    }    _visited_nodes_vis_pub.publish(node_vis);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="node-h"><a href="#node-h" class="headerlink" title="node.h"></a>node.h</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef _NODE_H_#define _NODE_H_#include &lt;iostream&gt;#include &lt;ros/ros.h&gt;#include &lt;ros/console.h&gt;#include &lt;Eigen/Eigen&gt;#include "backward.hpp"#define inf 1&gt;&gt;20//定义一个无穷大的值，1左移20位，1的二进制是0001，左移20位后变成1000000000000000000000，这是一个很大的数struct GridNode;//声明一个节点结构体,这是一个结构体，不是一个类typedef GridNode* GridNodePtr;//定义一个节点指针,GridNodePtr是一个指向GridNode的指针，这里typedef是一个关键字，用于给已有的数据类型定义一个新的名字//完整解释一下：typedef是C++中的一个关键字，用于给已有的数据类型定义一个新的名字，GridNode是一个结构体，GridNodePtr是一个指向GridNode的指针//这里已有的数据类型是什么：GridNode是一个结构体，GridNodePtr是一个指向GridNode的指针struct GridNode//定义一个节点结构体，包含了节点的坐标，方向，索引，g值，f值，父节点，节点的迭代器，这不是一个类吧，这是一个结构体{         int id;        // 1--&gt; open set, -1 --&gt; closed set    Eigen::Vector3d coord; //世界坐标系下的坐标，节点的坐标，坐标中心是地图的中心,这是 一个三维向量吗：是的，这是一个三维向量    Eigen::Vector3i dir;   // direction of expanding    Eigen::Vector3i index;//节点的索引，索引是节点在地图中的位置，和coord的区别是，索引是整数，而坐标是浮点数    //举例说明index:假设地图的分辨率是0.1m，地图的中心是(0,0,0)，那么地图的左下角的坐标是(-50,-50,-50)，那么地图的左下角的索引是(-500,-500,-500)    double gScore, fScore;    GridNodePtr cameFrom;//父节点，节点的父节点，这是一个指针，指向节点的父节点    std::multimap&lt;double, GridNodePtr&gt;::iterator nodeMapIt;    GridNode(Eigen::Vector3i _index, Eigen::Vector3d _coord){  //构造函数,初始化节点的各个参数，输入是节点的索引和坐标id = 0;//节点的idindex = _index;//节点的索引coord = _coord;//节点的坐标dir   = Eigen::Vector3i::Zero();//节点的方向    //Eigen::Vector3i::Zero()详细解释一下：Eigen::Vector3i是一个三维向量，Eigen::Vector3i::Zero()是一个三维向量，三个元素都是0    //分别介绍Eigen和Vector3i：Eigen是一个C++模板库，用于线性代数运算，Vector3i是Eigen库中的一个类，表示一个三维向量    //Zero()是Vector3i类中的一个函数，用于初始化一个三维向量，将向量的三个元素都初始化为0gScore = inf;//节点的g值,inf是一个无穷大的值fScore = inf;//节点的f值,inf是一个无穷大的值cameFrom = NULL;//节点的父节点,初始化为NULL    }    GridNode(){};//构造函数,初始化节点的各个参数    ~GridNode(){};//析构函数,释放节点的内存};//结构体什么时候调用构造函数，什么时候调用析构函数//结构体的构造函数和析构函数是在结构体的变量被创建和销毁的时候调用的//openSet.begin() -&gt; second 返回的是一个 GridNodePtr，该指针已经指向了一个已经构造完成的 GridNode 对象。这个 GridNode 对象的创建和构造在之前的代码中已经完成。#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h3><p>通常在编程中遇到的一些常见概念。为了便于理解，我将归类并简单描述。</p><ol><li><p><strong>指针</strong>：<br>指针是存储内存地址的变量。在C和C++编程中，我们可以使用指针访问不同的内存区域，从而获取或更改其内容。指针对于有效的内存管理和高效的编程任务（如动态内存分配和数据结构的操作）至关重要。</p></li><li><p><strong>数组</strong>：<br>数组是一个数据集合，其中所有数据都是相同类型的。在大多数编程语言中，数组中的元素可以通过其索引访问（通常从 0 开始）。</p></li><li><p><strong>对象和类</strong>：<br>对象和类是面向对象编程的两个基本概念。类定义了一组属性（数据元素）和方法（对数据执行操作的函数）。它是一个模板，我们可以根据这个模板创建对象（实例）。对象则是类的实例，具有定义在类中的属性和方法。</p></li><li><p><strong>结构体</strong>：<br>结构体是一种数据类型，在该类型中可以存储多种不同类型的数据。在C和C++中，我们可以使用<code>struct</code>关键字创建结构体。结构体通常用于存储相关联的数据项。</p></li><li><p><strong>模板</strong>：<br>在C++编程中，模板是一种功能强大的工具，允许我们编写独立于类型的代码。C++有两种模板，函数模板和类模板。这意味着我们可以创建一个可以处理多种数据类型的函数或类，并且数据类型可以在编译时确定。</p></li></ol><hr><p>结构体（Struct）并不是一个对象，而是一种用户定义的数据类型，用于组合并存储不同类型的数据。你可以将结构体看作是一个创建自定义数据类型的模板。在C和C++编程中，结构体通常用于存储一些逻辑上相关的信息。</p><p>创建结构体后，我们可以按照所定义的结构创建多个结构体变量（就像对象），并为这些变量的每个成员赋值。这些结构体变量存储的是结构体定义的数据类型。每个结构体变量都有自己的内存空间，它们的值相互独立，更改其中一个并不会影响其他变量。</p><p>例如，我们可以创建一个包含名字（字符串）和年龄（整数）的”Person”结构体，然后可以创建多个结构体变量（如tom、bob等），每个变量都会有自己特定的名字和年龄。</p><hr><p>在C++和其他一些类似编程语言中，点（.）和箭头（-&gt;）都用于访问结构体或对象的成员，但它们的使用情景有所不同：</p><ul><li><p><strong>点操作符（.）</strong>：当你直接操作结构体或对象时，使用点操作符来访问其成员。比如有一个名为 <code>person</code> 的结构体实例，我们可以用 <code>person.name</code> 来访问其 <code>name</code> 成员。</p></li><li><p><strong>箭头操作符（-&gt;）</strong>：当你有一个指向结构体或对象的指针时，使用箭头操作符来访问其成员。比如有一个指向 <code>person</code> 的指针 <code>p</code>，我们可以用 <code>p-&gt;name</code> 来访问 <code>person</code> 的 <code>name</code> 成员。</p></li></ul><p>总结一下，如果你持有的是实体的话就使用点<code>.</code>，如果你持有的是指针就使用箭头<code>-&gt;</code>。</p><hr><p>在C++中，定义一个结构体及其变量可以参照以下的步骤：</p><ol><li><p><strong>定义结构体</strong>：首先，我们需要定义结构体的数据结构，使用关键字 <code>struct</code> 加上你想要的结构体名字，然后在大括号 <code>{}</code> 中定义你需要的成员变量，比如我们定义一个名为 <code>Person</code> 的结构体，它包含 <code>name</code> 和 <code>age</code> 两个成员：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>定义结构体变量</strong>：有了结构体的定义后，我们可以根据这个模板来创建结构体的变量。可以直接在定义结构体的后面加上变量名来定义，也可以在后面的代码中通过 <code>struct 结构体名 变量名;</code> 来定义，比如：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 定义结构体时直接定义了一个名为 tom 的变量</span><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span> tom<span class="token punctuation">;</span><span class="token comment">// 在代码中定义一个名为 bob 的变量</span><span class="token keyword">struct</span> <span class="token class-name">Person</span> bob<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>给结构体变量赋值</strong>：定义好结构体变量后，我们可以通过点操作符 <code>.</code> 来给变量的各个成员赋值：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tom<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>tom<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span>bob<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>现在， <code>tom</code> 和 <code>bob</code> 就都已经安全地存储了他们各自的 <code>name</code> 和 <code>age</code> 信息。你可以按需在程序中使用它们。</p><hr><p><code>std::vector</code> 是一个 C++ 标准库提供的动态数组，其大小可以根据需要进行增加或减小。<code>vector&lt;double&gt;</code> 则表示元素类型为 <code>double</code> 的 <code>vector</code>，即可以存储 <code>double</code> 类型元素的动态数组。</p><p>以下介绍 <code>vector&lt;double&gt;</code> 的一些基本使用方法：</p><ol><li><p><strong>初始化</strong>：可以在声明时直接初始化，也可以在声明后添加元素。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> v1<span class="token punctuation">;</span>  <span class="token comment">// 声明一个空的vector</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 声明一个含有5个元素的vector，所有元素值为1.0</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> v3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化vector</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加元素</strong>：<code>vector</code> 提供了 <code>push_back</code> 函数可以在尾部添加元素。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在v1的尾部添加一个元素1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>访问元素</strong>：可以使用索引操作符 <code>[]</code> 或 <code>at</code> 函数访问元素，使用 <code>front</code> 和 <code>back</code> 分别获取首元素和尾元素。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> d1 <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 使用索引访问元素</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用at函数访问元素</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取首元素</span><span class="token keyword">double</span> d4 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取尾元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改元素</strong>：可以使用索引操作符 <code>[]</code> 或 <code>at</code> 函数修改元素。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>  <span class="token comment">// 使用索引修改元素</span>v1<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span>  <span class="token comment">// 使用at函数修改元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除元素</strong>：使用 <code>pop_back</code> 可以删除尾部元素，使用 <code>erase</code> 可以删除指定位置的元素。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除尾部元素</span>v1<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除首元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>查看容量和大小</strong>：使用 <code>size</code> 函数可以查看 <code>vector</code> 中已有元素的数量，使用 <code>capacity</code> 可以查看 <code>vector</code> 当前的容量，使用 <code>empty</code> 可以判断 <code>vector</code> 是否为空。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">size_t s <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取vector中元素的数量</span>size_t c <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取vector的当前容量</span><span class="token keyword">bool</span> b <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断vector是否为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>此外，<code>std::vector</code> 还提供了很多其他的功能，比如排序，查找，复制等，可根据具体需要使用。</p><hr><p><code>openSet.begin()</code> 的确会返回一个迭代器，该迭代器指向 <code>multimap</code> 中的第一个元素（关键字最小的元素）。然而，需要注意的是，这个迭代器不是指容器本身，而是指向容器内的一个元素。</p><p>在这个上下文中，<code>begin() -&gt; second</code> 是指迭代器指向的首个元素的值。如果 <code>openSet</code> 是一个 <code>std::multimap&lt;KeyType, ValueType&gt;</code>，那么 <code>openSet.begin() -&gt; second</code> 就对应了首个元素的 <code>ValueType</code> 值。</p><p>这是因为 <code>multimap</code> 中每个元素都是一个键-值对，可以用 <code>first</code> 访问键，用 <code>second</code> 访问值。在这里，键对应迭代器的 <code>first</code> 属性，值对应迭代器的 <code>second</code> 属性。</p><p>因此，<code>currentPtr = openSet.begin() -&gt; second;</code> 这行代码的作用是将 <code>openSet</code> 中第一个元素的值赋给 <code>currentPtr</code>。</p><hr><p><code>openSet.begin()</code>返回的是一个迭代器，这个迭代器指向<code>openSet</code>这个<code>multimap</code>容器中的第一个元素。迭代器可以理解为容器中元素的地址或者引用，是一个可以用于遍历和操作容器内元素的工具，而非容器本身。所以，<code>openSet.begin()</code>并不会返回容器本身。</p><hr><p>名称 “ptr” 通常在编程语言中表示 “pointer”，指针是一种特殊的变量，其值为另一个变量的地址，即它”指向”另一个存在内存中的位置。具有指针特性的变量，我们就通常称它为 “指针”。</p><p>指针通常用于以下几种情况：</p><ol><li><p><strong>动态内存管理</strong>： 当你想要在运行时动态分配内存空间时，会使用指针。例如在 C++ 中，我们可以使用 <code>new</code> 和 <code>delete</code> 来分配和释放内存，它们都操作指针。</p></li><li><p><strong>操作数组</strong>： 指针和数组有很密切的关系。实际上，数组名是一个指向数组首元素的指针。</p></li><li><p><strong>传递函数参数</strong>： 当我们想要在函数内部修改外部变量的值，或者传递大量数据时，会使用指针或者引用。这比直接传值更有效率，因为我们只是传递了数据的地址，而不是复制了整份数据。</p></li><li><p><strong>实现高级数据结构</strong>：如链接表、树、图等数据结构，都需要使用指针。</p></li></ol><p>所以，“ptr”是一个非常常见的名称，它通常代表一个指向某个数据或者对象的指针。</p><hr><p>是的，只包含一个键-值对的对象也可以称之为容器。在编程中，容器是用来持有和管理一组元素的数据结构。这些元素可以是基本的数据类型，也可以是复杂的对象类型，甚至是键-值对。</p><p>例如在 C++ 中，<code>std::map</code>、<code>std::unordered_map</code> 或者 <code>std::multimap</code> 都是可以存放键-值对的容器。即使这些容器中只有一个键-值对，也是被认为是容器的实例。</p><p>这是因为，容器的定义并非由其包含元素的数量决定，而是由其提供的用于访问、插入和删除元素等操作的接口决定。因此，最小的容器是空容器，即不包含任何元素的容器。</p><hr><p><code>vector&lt;double&gt; edgeCostSets;</code> 这段代码是在声明一个名为 <code>edgeCostSets</code> 的 <code>vector</code> 容器，该容器用于存储 <code>double</code> 类型的数据。</p><p><code>std::vector</code> 是 C++ 标准库中的一种序列容器，用于存储动态大小的元素集合，其大小可以根据需要自动调整。</p><p>举例说明 <code>edgeCostSets</code> 的一些常见用法：</p><p><strong>添加元素：</strong><br>我们可以使用 <code>push_back()</code> 方法向 <code>vector</code> 尾部添加元素：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">edgeCostSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edgeCostSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>访问元素：</strong><br>我们可以使用索引（跟数组类似）或者迭代器访问 <code>vector</code> 里的元素：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> firstElement <span class="token operator">=</span> edgeCostSets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 使用索引访问</span><span class="token comment">// 使用迭代器遍历并打印所有元素</span><span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> edgeCostSets<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> edgeCostSets<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取大小：</strong><br>可以使用 <code>size()</code> 方法获取 <code>vector</code> 的大小（元素个数）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>size_t size <span class="token operator">=</span> edgeCostSets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除元素：</strong><br>删除元素通常可以使用 <code>erase()</code> 方法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">edgeCostSets<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>edgeCostSets<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除第一个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>综上，<code>vector&lt;double&gt; edgeCostSets;</code> 定义了一个可以存储 <code>double</code> 类型数值的动态数组 <code>edgeCostSets</code>。</p><hr><p>当我们声明一个 <code>std::vector&lt;double&gt; edgeCostSets;</code> 时，我们实际上创建了一个动态数组 <code>edgeCostSets</code>，它可以持久化 <code>double</code> 类型的数据。初始化时，<code>edgeCostSets</code> 是空的，没有任何元素。</p><p>我们可以把 <code>std::vector</code> 容器想象成一条连续的内存存储线，对应到它的物理结构，它是在堆内存中连续分配的一片内存区域。每一个 <code>double</code> 类型的元素都按顺序放在这条线上的一个位置。</p><p>假设我们这样操作：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">edgeCostSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edgeCostSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>edgeCostSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个情况下容器的内部结构如下：</p><pre class="line-numbers language-none"><code class="language-none">index:   0    1    2  value:  1.1  2.2  3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们向 <code>edgeCostSets</code> 中追加了3个元素，每次调用 <code>push_back</code> 方法都会在 vector 的末尾添加一个新的元素。这些元素都存储在连续的内存地址上，我们可以通过索引（从<code>0</code>开始计数）来访问各个元素。</p><p>由于 <code>std::vector</code> 是动态数组，如果需要添加更多的元素，内存会自动重新分配并扩展以容纳新的元素。同时，由于是连续的内存空间，访问效率高，但插入删除效率低（尤其在中间位置插入删除）。使用 <code>std::vector</code> 需要根据实际需求判断其优劣。</p><hr><p><code>vector&lt;GridNodePtr&gt; neighborPtrSets;</code> 这段代码中，我们在创建一个名为 <code>neighborPtrSets</code> 的 <code>vector</code> 容器，该容器用于存储 <code>GridNodePtr</code> 类型的数据。这里 <code>GridNodePtr</code> 可能是一个指向 <code>GridNode</code> 对象的指针，或者是某种用户自定义类型。我会以 <code>GridNodePtr</code> 是一个指向对象的指针来进行解释。</p><p><code>std::vector</code> 是 C++ 标准库中的一种序列容器，用于存储动态大小的元素集合。在物理结构上，它是在堆内存中连续分配的一片内存区域。</p><p>假设我们已经定义了 <code>GridNode</code> 类，并且已经初始化了一些 <code>GridNode</code> 对象和相应的指针 <code>GridNodePtr</code>。</p><p>举例来说：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GridNode node1<span class="token punctuation">,</span> node2<span class="token punctuation">,</span> node3<span class="token punctuation">;</span>GridNodePtr nodePtr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>node1<span class="token punctuation">;</span>GridNodePtr nodePtr2 <span class="token operator">=</span> <span class="token operator">&amp;</span>node2<span class="token punctuation">;</span>GridNodePtr nodePtr3 <span class="token operator">=</span> <span class="token operator">&amp;</span>node3<span class="token punctuation">;</span>neighborPtrSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodePtr1<span class="token punctuation">)</span><span class="token punctuation">;</span>neighborPtrSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodePtr2<span class="token punctuation">)</span><span class="token punctuation">;</span>neighborPtrSets<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nodePtr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此例中，我们创建了3个 <code>GridNode</code> 对象，然后将它们的地址（即 <code>GridNodePtr</code> 指针）追加到了 <code>neighborPtrSets</code> 中。这样后，<code>neighborPtrSets</code> 的内部结构会如下所示：</p><pre class="line-numbers language-none"><code class="language-none">index:   0        1         2 value: &amp;node1   &amp;node2   &amp;node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，<code>neighborPtrSets</code> 就存储了三个指针，这些指针都是指向 <code>GridNode</code> 对象的指针。我们可以通过这些存储在 <code>neighborPtrSets</code> 中的指针来访问和操作原始对象。</p><p>请注意，容器中实际存储的是指针，而不是对象本身。因此，如果原始对象被修改，那么通过 <code>neighborPtrSets</code> 访问时得到的对象内容也会相应改变。同样，如果原始对象被销毁了，那么在 <code>neighborPtrSets</code> 中对应的指针就会成为悬空指针，此时再通过这个指针来访问对象就会出现未定义的行为。</p><hr><p>是的，当您创建一个新的 <code>GridNodePtr</code>，比如 <code>GridNodePtr currentPtr</code>，并且你让它指向一个新的 <code>GridNode</code> 对象时，就会调用一次 <code>GridNode</code> 的构造函数。实例化 <code>GridNode</code> 对象的方式可能是使用 <code>new</code> 关键字等。</p><p>假设你有如下的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GridNodePtr currentPtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">GridNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，一个新的 <code>GridNode</code> 对象被创建，同时 <code>GridNode</code> 的构造函数被执行。<code>currentPtr</code> 就是指向这个新创建的 <code>GridNode</code> 对象的指针。</p><p>确保当你不再需要这个 <code>GridNode</code> 对象时，你要使用 <code>delete</code> 关键字来释放它，防止内存泄漏。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> currentPtr<span class="token punctuation">;</span>currentPtr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">// 防止成为野指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>记住，对于在堆上动态分配的对象，你必须明确释放它们，否则这些对象将一直占据内存，直到程序结束，这可能会导致内存泄漏。</p><hr><p>代码 <code>currentPtr = openSet.begin() -&gt; second;</code> 中，实际上并没有创建一个新的 <code>GridNode</code> 对象，也就没有调用 <code>GridNode</code> 的构造函数。</p><p>这段代码的含义是，将 <code>currentPtr</code> 指向 <code>openSet</code> 容器的第一个元素的 <code>second</code> 成员。这里假设 <code>openSet</code> 是一个像 <code>std::map&lt;Key, GridNodePtr&gt;</code> 或 <code>std::unordered_map&lt;Key, GridNodePtr&gt;</code> 这样的容器，它的元素是由 <code>Key</code> 类型的键和 <code>GridNodePtr</code> 类型的值组成的键值对。</p><p>所以，<code>openSet.begin() -&gt; second</code> 获取的是 <code>openSet</code> 的第一个元素（键值对）的值部分，这个值应该是一个 <code>GridNodePtr</code>，指向某个 <code>GridNode</code> 对象。然后，你将 <code>currentPtr</code> 指向了这个已经存在的 <code>GridNode</code> 对象。</p><p>请注意，这种情况下，你有责任确保 <code>openSet.begin() -&gt; second</code> 指向的 <code>GridNode</code> 对象在使用 <code>currentPtr</code> 的整个生命周期中都是有效的。换句话说，如果在还在使用 <code>currentPtr</code> 的时候，<code>openSet.begin() -&gt; second</code> 指向的对象被销毁了，那么 <code>currentPtr</code> 就会变成一个悬空指针，这将导致未定义的行为。</p><hr><p>是的，你完全正确。<code>openSet.begin() -&gt; second</code> 返回的是一个 <code>GridNodePtr</code>，该指针已经指向了一个已经构造完成的 <code>GridNode</code> 对象。这个 <code>GridNode</code> 对象的创建和构造可能在之前的代码中已经完成，这可能包括调用构造函数初始化对象等操作。 </p><p>举个例子，以下面这段代码为例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 假设 GridNode 实现了以下构造函数</span><span class="token class-name">GridNode</span><span class="token double-colon punctuation">::</span><span class="token function">GridNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodeValue <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 在某处创建了一个新的 GridNode 对象，并加入到 openSet 中</span><span class="token keyword">int</span> keyValue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>GridNodePtr nodePtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">GridNode</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>openSet<span class="token punctuation">[</span>keyValue<span class="token punctuation">]</span> <span class="token operator">=</span> nodePtr<span class="token punctuation">;</span><span class="token comment">// 然后在其他地方，你可能会这样使用</span>GridNodePtr currentPtr <span class="token operator">=</span> openSet<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> second<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此例中，<code>openSet.begin() -&gt; second</code> 就会返回之前创建的 <code>GridNodePtr</code>，它指向的 <code>GridNode</code> 的构造函数在前面的代码中就已经调用过了。所以 <code>currentPtr</code> 最终指向的是这个已经构造并初始化完成的 <code>GridNode</code> 对象。</p><hr><p><code>continue</code> 语句仅跳过当前循环，并立即开始下一个迭代。对于嵌套循环，<code>continue</code> 仅适用于最内层的循环。</p><p>在你给的这段代码中，如果 <code>i == 0 &amp;&amp; j == 0 &amp;&amp; k == 0</code>，<code>continue</code> 会导致立即开始下一个 <code>k</code> 循环的迭代，而不是跳过整个 <code>k</code> 循环或 <code>j</code> 或 <code>i</code> 循环。也就是说，如果 <code>continue</code> 语句被执行，那么它将跳过下面的代码（如果有的话），并立即在 <code>k</code> 循环中开始下一个迭代。如果 <code>k</code> 循环已经是最后一次迭代，那么它将跳到 <code>j</code> 循环的下一次迭代，对于 <code>j</code> 循环同样如此。</p><p>如果你想在某个条件下跳过所有的循环或者跳出全部循环，你可能需要使用更复杂的控制流，例如设置一个标志变量或使用 <code>goto</code> 语句。（但是注意，<code>goto</code> 语句在现代编程中的使用通常是不被推荐的，因为它可能会使代码难以理解和维护。）</p><hr><p>在 C++ 中，<code>for</code> 循环有多种变体。这里使用的是 C++11 引入的基于范围的 <code>for</code> 循环。这种循环语句会依次迭代容器（如数组，向量，集合等）中的每个元素。</p><p>在你给出的代码 <code>for (auto ptr: gridPath)</code> 中：</p><ul><li><p><code>gridPath</code> 是一个容器，如 <code>std::vector</code>、<code>std::list</code>、<code>std::array</code>、<code>std::set</code>、<code>std::map</code>等。这个容器中应该含有你感兴趣的数据。</p></li><li><p><code>ptr</code> 是一个局部变量，其类型由 <code>auto</code> 自动推导得出，和 <code>gridPath</code> 中的数据类型相同。在每次循环中，<code>ptr</code> 都会被设置为 <code>gridPath</code> 中的当前元素。这样，你就可以在 <code>for</code> 循环的代码块中使用 <code>ptr</code> 来操作当前元素。</p></li></ul><p>例如，如果 <code>gridPath</code> 是一个 <code>std::vector&lt;int&gt;</code>，<code>ptr</code> 则为 <code>int</code> 类型的元素；如果 <code>gridPath</code> 是一个 <code>std::vector&lt;GridNodePtr&gt;</code>，<code>ptr</code> 则为 <code>GridNodePtr</code> 类型的元素。</p><p>这种基于范围的 <code>for</code> 循环是一种非常便捷的方式，可以轻易遍历容器，而无需管理索引或迭代器。下面是一个具体的例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> num<span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这将输出：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><code>vector&lt;Vector3d&gt; path;</code> 这行代码定义了一个名为 <code>path</code> 的 <code>std::vector</code> 容器，而这个容器中存储的元素类型是 <code>Vector3d</code>。<code>Vector3d</code> 通常代表一个包含三个数值的三维向量。</p><p>具体来说，<code>Vector3d</code> 可能是一个类或一个结构体，它通常包含三个浮点数成员（例如 <code>x</code>、<code>y</code> 和 <code>z</code>），用于描述三维空间中的一个点或者一个方向向量。例如，在某些图形编程库或者物理引擎中，<code>Vector3d</code> 可能被定义为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Vector3d</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span>    <span class="token keyword">double</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，<code>vector&lt;Vector3d&gt; path;</code> 将存储一系列的三维坐标或向量。例如，你可以这样初始化和使用它：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>Vector3d<span class="token operator">&gt;</span> path<span class="token punctuation">;</span>Vector3d point1 <span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 创建一个 Vector3d 对象</span>Vector3d point2 <span class="token punctuation">{</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 创建另一个 Vector3d 对象</span>path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 添加到 vector 的末尾</span>path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历 vector 并打印出每个 Vector3d 对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> point <span class="token operator">:</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x: "</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">.</span>x          <span class="token operator">&lt;&lt;</span> <span class="token string">", y: "</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">.</span>y          <span class="token operator">&lt;&lt;</span> <span class="token string">", z: "</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">.</span>z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在具体实际使用中，<code>Vector3d</code> 的定义可能略有不同，具体取决于你所使用的库或者实际需求。</p><hr><p><code>push_back</code> 是 C++ <code>std::vector</code> 类的一个成员函数，其主要用途是在容器的末尾插入一个新的元素。这个函数将其参数作为新元素添加到 vector 的末尾，vector 的大小会相应地增加。</p><p>下面是 <code>push_back</code> 的一些常见用法：</p><ol><li><p>向空 vector 添加元素：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v 现在包含一个元素：1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>向已有元素的 vector 添加元素：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v 现在包含四个元素：2, 3, 4, 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用循环添加多个元素：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v 现在包含十个元素：0, 1, 2, ... , 9</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加自定义类型的元素：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>Point p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v 现在包含一个 Point 元素：{1, 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 或者直接使用 <code>{}</code> 添加：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// v 现在包含两个 Point 元素：{1, 2}, {3, 4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>注意：如果 vector 的容量不足以存储新的元素，<code>push_back</code> 操作可能会导致存储内容的内存区间被重新分配，从而使所有指向旧存储内容的迭代器、引用和指针失效。为了避免频繁的内存重新分配，你可以先用 <code>reserve</code> 函数预先分配足够的空间。</p><hr><p>在 C++ 中，<code>insert</code> 是 <code>std::set</code>、<code>std::map</code>、<code>std::multiset</code>、<code>std::multimap</code>、<code>std::unordered_set</code>、<code>std::unordered_map</code>、<code>std::unordered_multiset</code> 和 <code>std::unordered_multimap</code> 容器的成员函数之一。这个函数用于插入元素到容器中。</p><p>在你的示例代码 <code>local_set.insert( make_pair(f_new, (*it).second) );</code> 中：</p><ul><li><p><code>local_set</code> 是一个集合或映射类型容器（比如 <code>std::map</code>, <code>std::set</code>, <code>std::unordered_map</code> 或者 <code>std::unordered_set</code>）。具体类型需要根据具体上下文来确定。</p></li><li><p><code>(*it).second</code> 表示迭代器 <code>it</code> 所指向的元素的第二组成部分，<code>it</code> 通常是指向一个如 <code>std::pair</code> 类型元素的迭代器。结构类似 <code>std::pair&lt;KeyType, ValueType&gt;</code>，其中 <code>.first</code> 是键（或叫第一组成部分），<code>.second</code> 是值（或叫第二组成部分）。</p></li><li><p><code>make_pair(f_new, (*it).second)</code> 会生成一个 <code>std::pair</code> 对象，其中第一个元素是 <code>f_new</code>，第二个元素是 <code>(*it).second</code>。</p></li><li><p><code>local_set.insert( make_pair(f_new, (*it).second) );</code> 最终将一个包含两个元素 <code>f_new</code> 和 <code>(*it).second</code> 的 pair 插入到 <code>local_set</code> 容器中。</p></li></ul><p>举个例子，如果 <code>local_set</code> 是 <code>std::map&lt;int, int&gt;</code> 类型，<code>it</code> 是另一个相同类型 <code>map</code> 的迭代器，并且 <code>f_new</code> 是 <code>int</code> 类型，则以下代码将将 <code>f_new</code> 和 <code>it</code> 所迭代到的值作为新的键值对插入到 <code>local_set</code> 中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> another_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> another_map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f_new <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> local_set<span class="token punctuation">;</span>local_set<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>f_new<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在 local_set 中插入 pair（5, 2）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;Astar-searcher-cpp&quot;&gt;&lt;a href=&quot;#Astar-searcher-cpp&quot; class=&quot;headerlink&quot; title=&quot;Astar_searcher.</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="http://liam-xander.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>规控前奏——ROS相关</title>
    <link href="http://liam-xander.github.io/2024/03/14/20240314/"/>
    <id>http://liam-xander.github.io/2024/03/14/20240314/</id>
    <published>2024-03-14T11:00:00.000Z</published>
    <updated>2024-03-14T13:09:25.600Z</updated>
    
    <content type="html"><![CDATA[<p>怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》</p><h2 id="规控前奏——ROS相关"><a href="#规控前奏——ROS相关" class="headerlink" title="规控前奏——ROS相关"></a>规控前奏——ROS相关</h2><h3 id="1-ROS概述"><a href="#1-ROS概述" class="headerlink" title="1.ROS概述"></a>1.ROS概述</h3><p>ROS是一个强大的工具,我们应该熟练使用它,而不被它所束缚。ROS的通信机制类似于MQTT,采用分布式的话题通讯和服务通讯模式。话题用于发送和接收数据,服务则是请求-响应式的。参数服务器提供全局变量功能。</p><p>ROS不仅提供通信机制,还包括开发工具、应用功能包和庞大的生态系统。开发工具如rqt_graph可视化节点关系,rostopic/rosservice查看话题/服务,rosmsg/rossrv管理消息/服务类型。应用功能包可直接移植使用,节省开发时间。</p><p>分析新功能包的步骤:首先浏览目录结构,查看package.xml和CMakeLists.txt了解功能和依赖;然后检查话题/服务的数据格式,研究launch文件中的节点关系;最后启动功能包,通过rqt_graph验证分析结果。</p><p>熟练使用ROS工具、移植应用功能包、组合搭配不同功能,才是掌握ROS的关键所在。</p><h3 id="2-ROS通信机制（划重点！）"><a href="#2-ROS通信机制（划重点！）" class="headerlink" title="2.ROS通信机制（划重点！）"></a>2.ROS通信机制（划重点！）</h3><p><strong>感觉ROS Master节点管理器的模式可以类比到mqtt，它们两个都是分布式的通讯</strong>；</p><blockquote><p>微信的及时通讯等也使用了基于MQTT的消息推送机制,使用发布/订阅模式进行消息传输,降低了系统耦合度。使用TCP/IP协议通信,提供不同服务质量(QoS)的消息发布订阅。消息分为主题和内容两个逻辑部分。</p></blockquote><p><strong>感觉话题通讯就是发送数据和接收数据，只是丢出去和接收的关系；感觉服务通讯就是我给你数据，你给我反馈，没有反馈就是失败和错误；参数编程模式:参数服务器(Parameter Server),允许在节点之间共享参数变量,实现全局配置的功能。其实就是一个全局变量……</strong></p><p>ROS是一种高级的机器人编程环境，其主要组成部分包括通信机制、开发工具、应用功能以及一个完整的生态系统。</p><ul><li><p><strong>通讯机制</strong>：这是ROS的核心部分，它允许不同的软件组件（称为节点）在一个共享的网络环境中进行交流和协作。这些节点由节点管理器管理。</p></li><li><p><strong>节点</strong>：节点是ROS中进行任务处理的基本单位，每个节点都会执行一个特定的任务。不同的节点可以通过消息的方式相互通信。</p></li><li><p><strong>节点管理器</strong>：节点管理器（roscore）负责连接和管理所有的节点。它会记录节点的信息，并确保它们能够相互找到并进行通信。</p></li><li><p>话题（Topics）和服务（Services）：这是ROS的两种主要通讯方式。话题是一种发布/订阅的通讯方式，一个节点可以发布消息到某个话题上，其他节点可以订阅这个话题来接收消息。而服务则是一种同步的请求/响应的通讯方式，一个节点可以向另一个节点请求服务，等待对方的响应。</p></li><li><p><strong>开发工具</strong>：ROS 提供了一套完整的开发工具，帮助开发者更有效地开发和调试软件。</p></li><li><p><strong>应用功能</strong>：ROS 定义了一系列的应用级功能，比如导航、感知和操控等，帮助开发者构建复杂的机器人应用。</p></li><li><p><strong>生态系统</strong>：除了上述的软件组件，ROS 还有一个健康的社区和丰富的软件资源，帮助开发者快速开发和部署复杂的机器人系统。</p></li></ul><h3 id="3-ROS开发工具"><a href="#3-ROS开发工具" class="headerlink" title="3.ROS开发工具"></a>3.ROS开发工具</h3><p>ROS提供了rqt_graph这个工具,它能够生成节点关系图,直观地展现出当前运行的各个节点之间的连接情况,充分反映了整个系统的通信拓扑结构。使用rqt_graph,就能一目了然地观察到系统是如何被整合并运行起来的。</p><h3 id="4-运行ROS系统实例"><a href="#4-运行ROS系统实例" class="headerlink" title="4.运行ROS系统实例"></a>4.运行ROS系统实例</h3><p>为了直观地理解ROS系统的运行机制,启动键盘控制示例,并运行rqt_graph可视化工具。节点关系图清晰地展现了系统各个节点之间的数据流动过程,我一目了然地看到了系统是如何被整合并协同工作的。至少通过节点关系图,大致把握了整个系统的运行逻辑和节点交互的方式。</p><p>然后进一步了解这些节点之间传递的具体数据内容。节点之间的通信主要依赖于话题(Topic)和服务(Service)两种通信模式。要查看话题的数据格式和内容,可以使用ROS提供的rostopic工具。</p><p>而既然有rostopic工具用于管理话题通信,自然也应该存在类似的rosservice工具,用于检查和调用服务通信的请求响应数据。通过这些工具,就能够逐步深入理解ROS系统的本质运行原理。</p><p>ROS（Robot Operating System）的入门学习，其中包括ROS的通讯机制和工具的使用。ROS的通讯机制通过msg和srv的格式来定义，这些格式由rosmsg或rossrv工具来决定。<br>这些工具只是ROS系统中的一部分，要想熟练掌握ROS，你需要了解和掌握更多的工具，例如rviz、gazebo、Moveit等。ROS的工具体系十分强大和全面。<br>这里的”ROS的应用功能”指的是功能包，这些功能包可以被移植到你自己的系统中使用。当你需要让两个或以上的功能包一起工作时，你就需要进行一些调配。<br>换言之，ROS提供了许多已经建好的”轮子”供我们使用，</p><h3 id="5-应用功能包使用-划重点！"><a href="#5-应用功能包使用-划重点！" class="headerlink" title="5.应用功能包使用 (划重点！)"></a>5.应用功能包使用 (划重点！)</h3><p><strong>在拿到一个新的、陌生的功能包的时候，我的习惯，先是tree一下，看一下这个功能包里面都有哪些组成；然后是看package.xml，这个文件可以让我大致知道这个功能包能做什么，依赖了什么；接着是CMakeList.txt，这里我可以看到依赖包、消息、服务、动作、配置，甚至是需要编译的文件、测试节点、文档等等内容。在看完package.xml和CMakeList.txt以后，对这个功能包有了一个大概的猜想</strong>。</p><p><strong>然后是查看话题、服务等等内容，看看数据格式是什么，内容是什么；再然后就是看launch文件，看launch文件的每个node和param，了解在这个功能包里面的节点关系是什么样的</strong>。</p><p><strong>最后就是启动这个功能包，rqt_graph验证自己的猜想。至此，一个功能包的分析大致结束</strong>。</p><p><img src="/images/12.jpg"></p><p>以上内容根据博客：<a href="https://www.guyuehome.com/Bubble/detail/id/66110">失眠，聊聊自己搞ROS的心得体会吧 </a>进行补充与修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》&lt;/p&gt;
&lt;h2 id=&quot;规控前奏——ROS相关&quot;&gt;&lt;a href=&quot;#规控前奏——ROS相关&quot; class=&quot;headerlink&quot; title=&quot;规控前奏——ROS相关&quot;&gt;&lt;/a&gt;规控前奏——ROS相关&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="ROS" scheme="http://liam-xander.github.io/categories/ROS/"/>
    
    
    <category term="ROS" scheme="http://liam-xander.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Rototics and Control</title>
    <link href="http://liam-xander.github.io/2024/03/13/20230312night/"/>
    <id>http://liam-xander.github.io/2024/03/13/20230312night/</id>
    <published>2024-03-13T06:25:00.000Z</published>
    <updated>2024-03-16T02:17:05.503Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="Robotics" scheme="http://liam-xander.github.io/tags/Robotics/"/>
    
    <category term="C++" scheme="http://liam-xander.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Rototics and Control</title>
    <link href="http://liam-xander.github.io/2024/03/13/another/"/>
    <id>http://liam-xander.github.io/2024/03/13/another/</id>
    <published>2024-03-13T06:25:00.000Z</published>
    <updated>2024-03-12T06:59:48.051Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="Robotics" scheme="http://liam-xander.github.io/tags/Robotics/"/>
    
    <category term="C++" scheme="http://liam-xander.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>typora-vue-theme主题介绍</title>
    <link href="http://liam-xander.github.io/2024/03/12/20240312/"/>
    <id>http://liam-xander.github.io/2024/03/12/20240312/</id>
    <published>2024-03-12T01:25:00.000Z</published>
    <updated>2024-03-12T04:23:18.039Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="Typora" scheme="http://liam-xander.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liam-xander.github.io/2024/03/11/hello-world/"/>
    <id>http://liam-xander.github.io/2024/03/11/hello-world/</id>
    <published>2024-03-11T15:01:39.157Z</published>
    <updated>2024-03-12T04:21:40.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="Typora" scheme="http://liam-xander.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>typora-vue-theme主题介绍</title>
    <link href="http://liam-xander.github.io/2023/12/29/20240312afternoon/"/>
    <id>http://liam-xander.github.io/2023/12/29/20240312afternoon/</id>
    <published>2023-12-29T06:25:00.000Z</published>
    <updated>2024-03-12T04:23:14.934Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="Typora" scheme="http://liam-xander.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Trajectory planning and cooperative control of UAV lifting system主题介绍</title>
    <link href="http://liam-xander.github.io/2023/10/16/recommended-articles/"/>
    <id>http://liam-xander.github.io/2023/10/16/recommended-articles/</id>
    <published>2023-10-16T02:34:00.000Z</published>
    <updated>2024-03-12T04:25:39.960Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Markdown" scheme="http://liam-xander.github.io/categories/Markdown/"/>
    
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
    <category term="UAV" scheme="http://liam-xander.github.io/tags/UAV/"/>
    
  </entry>
  
  <entry>
    <title>typora-vue-theme主题介绍</title>
    <link href="http://liam-xander.github.io/2023/09/07/hello-world-again/"/>
    <id>http://liam-xander.github.io/2023/09/07/hello-world-again/</id>
    <published>2023-09-07T01:25:00.000Z</published>
    <updated>2024-03-12T04:25:45.860Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="C++" scheme="http://liam-xander.github.io/categories/C/"/>
    
    
    <category term="Typora" scheme="http://liam-xander.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Trajectory planning主题介绍</title>
    <link href="http://liam-xander.github.io/2023/08/26/test/"/>
    <id>http://liam-xander.github.io/2023/08/26/test/</id>
    <published>2023-08-26T02:35:00.000Z</published>
    <updated>2024-03-12T04:23:01.978Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Markdown" scheme="http://liam-xander.github.io/categories/Markdown/"/>
    
    
    <category term="Typora" scheme="http://liam-xander.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="http://liam-xander.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>一切的开始</title>
    <link href="http://liam-xander.github.io/2023/05/29/20230522/"/>
    <id>http://liam-xander.github.io/2023/05/29/20230522/</id>
    <published>2023-05-29T00:00:00.000Z</published>
    <updated>2024-03-15T06:10:53.003Z</updated>
    
    <content type="html"><![CDATA[<p>怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》</p><hr><h2 id="时间、空间与最速曲线的深入思考"><a href="#时间、空间与最速曲线的深入思考" class="headerlink" title="时间、空间与最速曲线的深入思考"></a>时间、空间与最速曲线的深入思考</h2><p>在探索时间与空间的关系时，我们常感到被无形的力量所束缚。作为三维生物的人类，我们的存在似乎完全受制于时间这一维度的严格支配。我们所经历的“现在”不断地滑向过去，未来则不断地成为现在，形成一个连续不断的流。这一切仿佛注定了所有生命将在不同的轨迹上前进，但无论速度快慢，无法逃脱时间的终极归宿。</p><h3 id="时间的相对性与最速曲线"><a href="#时间的相对性与最速曲线" class="headerlink" title="时间的相对性与最速曲线"></a>时间的相对性与最速曲线</h3><p>然而，爱因斯坦的相对论以及<strong>最速曲线</strong>概念向我们揭示了时间和空间并非刚性固定，而是可以被形变和曲折的东西。最速曲线，或称为测地线，在广义相对论中描述了在弯曲时空中质点在两点间所经历的最短路径。它令人考虑，是否能通过物理法则以及对时空的更深理解，来找到一种“最优的人生路径”。</p><h4 id="时空曲线：穿越宿命的航道"><a href="#时空曲线：穿越宿命的航道" class="headerlink" title="时空曲线：穿越宿命的航道"></a>时空曲线：穿越宿命的航道</h4><p>时空曲线不仅仅是数学物理上的抽象概念，它在实际中亦有所体现。它仿佛是一条穿越重重时空纠葛的隐秘航道，带我们掠过潜在的无数可能性，最终抵达命运所指引的彼岸。</p><h3 id="生产制造和项目管理中的最优路径深化"><a href="#生产制造和项目管理中的最优路径深化" class="headerlink" title="生产制造和项目管理中的最优路径深化"></a>生产制造和项目管理中的最优路径深化</h3><ul><li><strong>生产制造领域</strong>中，通过构建高度自动化与信息化的工艺流程，人类可以在时间的长河中创造出更大的价值，提升生活的质量。</li><li><strong>项目管理</strong>也不再是简单的任务安排，而是成为了一门实现效率与创造性结合的艺术，通过科学合理的规划和资源调配达到目标。</li></ul><h3 id="个人目标追求与时间效率的最优化"><a href="#个人目标追求与时间效率的最优化" class="headerlink" title="个人目标追求与时间效率的最优化"></a>个人目标追求与时间效率的最优化</h3><p>每个人生旅途中的目标和梦想是独一无二的，如何在时间的大海中找到属于自己的航向？我们不仅需要对自我有深度的了解，还需对周達環境有敏锐的认知。选择最优路径就如同在一个多元宇宙中选择我们所期望的宇宙版本，意味着我们要结合理性与直觉、策略与灵感。</p><h4 id="适应变化：人生选择的智慧"><a href="#适应变化：人生选择的智慧" class="headerlink" title="适应变化：人生选择的智慧"></a>适应变化：人生选择的智慧</h4><p>我们必须学会适应变化，以坦然面对生活中的不确定性和曲折，利用我们的灵活性和资源克服障碍，持续向着我们的最终目的地迈进。</p><h3 id="决策的艺术与意志力的坚持"><a href="#决策的艺术与意志力的坚持" class="headerlink" title="决策的艺术与意志力的坚持"></a>决策的艺术与意志力的坚持</h3><p>追寻梦想的道路充满了未知和变数。我们生命中的每个决策都类似于选择在时空中的一个节点，影响着未来的方向和速度。这不仅需要明智的选择和深远的思考，还需要不懈的追求和不断的自我超越。</p><hr><p>经过深度的思考与选择，我们或许能够趋近生命的“最速曲线”，更有效地利用有限的时间实现价值最大化。是的，时间无法逆流，生命不可重来，但在我们的意志和智慧引导下，旅途中的风景将因我们的抉择而更加璀璨。</p><blockquote><p>“通过深刻的自我改变，世界亦将随之改变。只有成就更好的自己，才能开辟出一片更和谐美好的天地。” </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;怕什么真理无穷，进一寸有一寸的欢喜。——读《胡适谈读书》&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;时间、空间与最速曲线的深入思考&quot;&gt;&lt;a href=&quot;#时间、空间与最速曲线的深入思考&quot; class=&quot;headerlink&quot; title=&quot;时间、空间与最速曲线的深入思考&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="thinks" scheme="http://liam-xander.github.io/categories/thinks/"/>
    
    
    <category term="thinks" scheme="http://liam-xander.github.io/tags/thinks/"/>
    
  </entry>
  
</feed>
